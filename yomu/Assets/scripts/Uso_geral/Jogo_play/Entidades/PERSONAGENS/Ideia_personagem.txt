
//       // --------------- DATA --------------------
      
   
//       public Ponto ponto_atual;    
   
//       public Conversa[] conversas; 
//       public Quest[] quests;   
//       public Plot[] plots;
      
      
   
//       // -------------- METODOS -----------------

   
      
//       // no mes o foco vai ser diminuir a influencia de atos passados caso tenha algum
//       // se alguem morreu => a tendencia é ficar mais deprimido
//       // cada mes esse valor reduz em 20%
//       public Action<Personagem> Verificar_mudancas_variaveis_internas_mes;
      
//       // ** esse vai ser o unico que é obrigatorio para todos
//       // o dia vai fazer o estado atual do personagem voltar a um estado de equilibrio
//       // pode também mudar lentamente o estado de equilibrio
//       public Action<Personagem> Verificar_mudancas_variaveis_internas_dia;
      
//       // Pode alterar o humor dependendo do que o personagem esta fazendo 
//       public Action<Personagem> Verificar_mudancas_variaveis_internas_periodo;
      

//       // ---- atualizado cada dia 
//       // ----------------------------

//       //  isso teria 3 funcoes
//  		//	  conversa :   "falar mal de pessoas que usam rosa" => 3 dias depois : "eu estava pensando... se eu usasse rosa voce não iria gostar de mim?" 
//       //   plot     :   "quer convidar ele para a cacheira caso a intimidade passe de 700" => precisa de 3 relacoes de intimidade primeiro 
//       //   quest    :   "vai pedir para o player ajudar ela a matar um cavalo que matou o canario dela" => precisa ter 500g para pagar pelo transporte 
   
//       public Action<Personagem> Verificar_assuntos_internos;
//       public Action<Personagem> Verificar_assuntos_internos;


    
    
// 

/*


*** personagens que não estão em foco não precisam de dados?
*** isso vai fazer 
** o total de ram que o sistema vai usar por conta dos personagens vai ser numero_maximo_de_personagens * dados_por_personagem * espaço_medio_por_dado
   certas coisas vao precisar ser strings ( ? ) 
   poderia ser enum. 

o numero de personagens não pode crescer infinitamente, mas eu não tenho ainda noção de escala 

o valor principal para ver é o tamanho da dll. 
quanto de memoria eu estou disposto a usar? 

somente o jogo normal com a unity gasta em torno de 150mb 

acho que até 300mb é algo aceitavel

150mb => 150_000_000 bytes

com 150 personagens pode ter 1mb

todas as classes com os metodos vão ser estaticos. 
Pois como oque é realmente grande vai ser as proprios funcoes nao faz sentido colocar parte da logica dentro da dll. 

oque eu tenhop que pensar é quem vai conseguir puxar essa funcao e quem vai conseguir mudar 

  sistema :: assembly.class().metodo 

  a classe precisa ter um metodo que coloca os dados

  public enum Tipo_mov_lily {

  	default, 
        normal, 
  
  }

  precisa ser algo: class {

  		//                                esses dados estariam complexos 
  		void Colocar_dados( Lily _lily , string _dados_str ) { 

				// 
    				int index_movimento = 0; 
    				char tipo_mov_char = _dados_str [ index_movimento ];
				Tipo_mov_lily tipo_mov = ( Tipo_mov_lily ) tipo_mov_char;

    				switch( tipo_mov ){
					case Tipo_mov_lily.default: _lily.Updat_movimento = Lily_lidar_movimento; break; 
					default : Exception("a");	
     
				}

 
		}
	
  
  }

chamar o metodo nao vai ter muito custo, mas colocar tem. 


parte generica  => 

nome : ##
salario : 1520 
posicao atual :  ( int ) posicao
personagens_intimidade_dados : [

  lily : [  ],
  amy : [  ],

]



personagem {

   [ ... ] => contem dados do personagem 
          esse precisa ser especifico para cada personagem?

          coisas: 
                 roupa default
                 salario, 
                 funcao atual, 
                 
   
   [ ... ] => container com estado emocional do personagem
   [ ... ][ ... ] => container com informacoes sobre os personagens
   
 
   dados_atualizar_dia

   Update_dia(){



   }




}


ponto_atual 

public action(){

}


lily.Movimentar( mes , semana, dia , priodo ){


	switch( dia_semana ){	

	case Dia.Segunda : lidar_movimento_segunda( mes , semana, dia , priodo )


}


lidar_movimento_segunda(){


      switch( periodo ){

case Periodo.Manha: {

if( variavel ) { dados[ clothes ] = clothes.duck; return;} 
if( variavel_2 ) { dados[ clothes ] = clothes.normal; return;} 


braak;


}

}
      if( variavel ) { dados[ clothe ] = Clothes.duck; }



}



}




** dados 

   todo personagem precisa de dados dinamicos que são resetados depois de cada dia 

 

 
tempo para atualizar


 - mensal 
 - semana
 - dia
 - periodo 
 - tempo real




personagem 


 quando o dia trocar 

    // so vai ter em personagens que estao em foco.  
    // aqui vai ter uns 3 segundos de animacao para mudar de dia. Oque da uns 10b de ciclos


    ** verificar mudancas de variaveis internas 
         ** variaveis fluidas tendem a voltar para o padrao de forma brusca
         ** variaveis padroes podem mudar um pouco de forma lenta 
         
 
    ** assuntos internos => plots / conversas / quests
            ** certos assuntos podem levar um tempo ou ter que verificar alguns outros requisitos   
                    ex: 
 			conversa :   "falar mal de pessoas que usam rosa" => 3 dias depois : "eu estava pensando... se eu usasse rosa voce não iria gostar de mim?" 
                        plot     :   "quer convidar ele para a cacheira caso a intimidade passe de 700" => precisa de 3 relacoes de intimidade primeiro 
                        quest    :   "vai pedir para o player ajudar ela a matar um cavalo que matou o canario dela" => precisa ter 500g para pagar pelo transporte 

  
    ** verificar enviar cartas para o player 
          ** elas sempre vão chegar de manha 

    ** verificar finanças 
         ** verifica os itens que tem e muda tabela de desejos 
         ** verifica o dinheor atual e faz escolhas        

    ** verificar se tem plot imediato *raro => personagem vai falar com player 
    ** checar se vai ficar com algum plot em espera 
  
 
 quando trocar periodo

    ** verificar mudanca de roupa
    ** movimento 
    ** Checar atividade por periodo
    ** checar mudanca variaveis internas por periodo 
          ** se o personagem no periodo passado fez algo que gosta ele vai estar de bom humor 

  
    ----------------------- 
 
    ** personagens nos mesmos lugares podem interagir 



 quando no mesmo espaço que o player: 
   
    
    ** checar se vai triggar com o player por conversa => inicia com algum bloco 
    ** checar se vai triggar com player por plot   
    ** checar se vai triggar com player por quest  

 qunado for iniciar conversa com o player 

    ** verificar plot
    ** verificar quest  
    ** verificar conversa imaediata 

 durante a conversa player 
 
  ** atualizar stats sobre o player e verificar se algum bloco de conversa foi bloqueado 






updates vs atos


Update : depende de tempo 
Ato : depende de algo iniciar 





** preciso checar mais oque? 




reposta = Pegar_resposta()::bool 

mudar_valor()::void





lily_comeu_biscoito => bool 
quantos_biscoitos_lily_comeu => 10


 
*/




/*




	save /  

	      personagens  /

    	 	                lily  /

									// dados exclusivos do save 

									dados_sistema.txt

									// se o personagem esta em foco 

									dados_container_bool.dat
									dados_container_int.dat
									dados_container_string.txt
									dados_container_datas.dat

								
							ruby  /
							



** oque pode introduzir personagens
         => tempo       
		 => mudar de local 
		 => quests 
	** nao precisa ser o player. 
	se a lily for para outra cidade o jogo precisa iniciar todos os personagens da cidade. 
	mas não é iniciar na ram, vai ser soment efazer uma copia dos arquivos de cada personagem para o save.
						
 

*/


		/*
  			esse arquivo seria interessante manter ele um pouco mais legivel, para se eu precisar ler ele no folder
     
  				--- FORMATO ---
      
      		--- personagem : nome
            --- personagem foi colocado no jogo 
                ** 
	 		--- personagem com trigger 
    		--- lista de trigger personagem 
       				** qualquer coisa que possa triggar vai estar aqui. 
	   			** o sistema pode fazer calculos sem instanciar os personagens 
	 		--- Personagem bloqueado pelo sistema ()
	
	        --- se ja foi apresentado
                    se o personagem nao foi apresentado ele vai usar tudo como default 
                    Sim, default vai focar somente nas coisas mais importantes
                    nao é somente por uma questão de reduzir processamento, mas é de 
                    true => real 
                    false => projecao 
            
	        --- data que o personagem foi apresentado 
		 
		 	--- esta em foco ( interesse do player esta maior que 350 OU deliberadamente selecionou para ficar em foco )
    		--- player marcou para ficar em foco
       			** se o player mostrar interesse no personagem sobre, se nâo mostrar desce.
	            ** nao afeta os dados dos personagens em si, mas faz com que o player possa ter mais interações oque pode levar a mais levels	     
		     
		    --- interesse player : ( numero entre 0 e 1000 )     
	  		--- projecao de interesse : ( numero entre 0 e 1000  );
     			** projecao vai pegar os traços dos personagens que o player gosta e ver se batem 
     		--- afetividade ( numero entre -1000 e 1000 ) isso vai sinalizar se o player tenta prejudicar ou ajudar o personagem
		    --- projecao afetividade ( numero entre -1000 e 1000 )
	            ** projecao se o pleyer vai querer ajudar o personagem 

			// as funcoes de update nao vão mudar com facilidade e não vai ter muitas. 
   			// mudar o update pode significar que o contexto do update mudou completamente 
      			// se algo assim atrapalhar posso mudar para "( char_id_enum )_nome_update"
		    --- funcao_update_movimento : nome  
	  		--- funcao_update_conversas : nome
     		--- ... ( outros updates nomes )

      		  
  		*/

        /*
			      gosta
	  			|
	      			|
		tedio ----------|-------- interesse
	      			|
		       		|
			      odeia
	 
	 	interesse => se o player pode interagir ele interage. 

		interesse alto e 
   
  		*/






public enum Nivel_de_interesse_player_no_personagem : byte {

        muito_baixo ,
        baixo,
        medio, 
        alto,
        muito_alto, 

}


/*
   muito baixo => na dll_geral
   nivel baixo e media => dll_1
   alto e muito alto => dll_2

*/

// ** trocar prioridades também precisa ser controlado 


// sempre que um personagem se afastar da posicao do player ele desce um nivel para cada local
// mesma cidade locais diferentes => -1
// mesmo estado cidades diferentes => -2 
// ...

// ** para mudar o local de um persoangem precisa ter uma funcao especifica. 
// Controlador mundo vai ter os locais que estao cada personagem 



